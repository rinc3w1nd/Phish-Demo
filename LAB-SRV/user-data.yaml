#cloud-config
hostname: lab-srv
manage_etc_hosts: true

users:
  - name: demo
    gecos: Lab Demo Server
    sudo: ALL=(ALL) NOPASSWD:ALL
    shell: /bin/bash
    ssh_authorized_keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQD...REPLACE_WITH_YOUR_PUBKEY...

package_update: true
package_upgrade: true
packages:
  - python3
  - python3-venv
  - nginx
  - curl
  - iproute2
  - net-tools
  - tcpdump

write_files:
  # Netplan config: static IP for SRV
  - path: /etc/netplan/50-lab-network.yaml
    permissions: '0644'
    content: |
      network:
        version: 2
        renderer: networkd
        ethernets:
          eth0:
            dhcp4: no
            addresses: [10.0.100.20/24]
            gateway4: 10.0.100.1
            nameservers:
              addresses: [10.0.100.1]

  # Flask demo server systemd unit
  - path: /etc/systemd/system/demo-server.service
    permissions: '0644'
    content: |
      [Unit]
      Description=Phish Demo Flask Server
      After=network.target

      [Service]
      User=demo
      WorkingDirectory=/home/demo/demo-app
      ExecStart=/usr/bin/python3 /home/demo/demo-app/app.py
      Restart=always

      [Install]
      WantedBy=multi-user.target

  # Nginx config to proxy to Flask app, using CA-signed cert
  - path: /etc/nginx/sites-available/demo.conf
    permissions: '0644'
    content: |
      server {
        listen 443 ssl;
        server_name login.cloud.example;

        ssl_certificate     /etc/ssl/demo/login.cloud.example.crt;
        ssl_certificate_key /etc/ssl/demo/login.cloud.example.key;

        location / {
          proxy_pass http://127.0.0.1:5000;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
        }
      }

runcmd:
  # Apply network
  - [ sh, -c, "netplan apply || true" ]
  # Setup demo app
  - [ sh, -c, "mkdir -p /home/demo/demo-app" ]
  - [ sh, -c, "cat > /home/demo/demo-app/app.py <<'PY'
import os
from flask import Flask, request, jsonify
app = Flask(__name__)

@app.route('/login')
def login():
    user = request.args.get('user', 'unknown')
    token = f'demo-token-for-{user}'
    resp = jsonify({'status':'ok','user':user,'token':token})
    resp.headers['X-DEMO-TOKEN'] = token
    return resp

@app.route('/protected')
def protected():
    token = request.headers.get('X-DEMO-TOKEN')
    if token:
        return jsonify({'status':'access granted','token':token})
    return jsonify({'status':'denied'}), 403

if __name__ == '__main__':
    app.run(host='127.0.0.1', port=5000)
PY" ]
  - [ sh, -c, "chown -R demo:demo /home/demo/demo-app" ]
  - [ sh, -c, "systemctl enable --now demo-server" ]

  # Create placeholder certs (so nginx starts even before CA certs copied)
  - [ sh, -c, "mkdir -p /etc/ssl/demo" ]
  - [ sh, -c, "openssl req -x509 -nodes -days 1 -newkey rsa:2048 -keyout /etc/ssl/demo/login.cloud.example.key -out /etc/ssl/demo/login.cloud.example.crt -subj '/CN=login.cloud.example'" ]
  - [ sh, -c, "ln -s /etc/nginx/sites-available/demo.conf /etc/nginx/sites-enabled/demo.conf || true" ]
  - [ sh, -c, "systemctl restart nginx" ]
  - [ sh, -c, "echo 'Replace /etc/ssl/demo/login.cloud.example.{crt,key} with CA-signed files from lab-ca.sh and reload nginx' > /etc/motd" ]

final_message: |
  LAB-SRV bootstrap finished.
  * Replace dummy cert with CA-signed one:
      scp demo-login.lab.crt.pem demo@login.cloud.example:/tmp/
      scp demo-login.lab.key.pem demo@login.cloud.example:/tmp/
      sudo mv /tmp/demo-login.lab.crt.pem /etc/ssl/demo/login.cloud.example.crt
      sudo mv /tmp/demo-login.lab.key.pem /etc/ssl/demo/login.cloud.example.key
      sudo systemctl reload nginx
  * Demo app listening on https://login.cloud.example/login
  * Demo app returns X-DEMO-TOKEN header